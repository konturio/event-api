<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.DataLakeMapper">

    <insert id="create" useGeneratedKeys="false">
        INSERT INTO data_lake (observation_id, external_id, updated_at, loaded_at, provider, data, normalized, skipped)
        VALUES (#{observationId}, #{externalId}, #{updatedAt}, #{loadedAt}, #{provider}, #{data}, #{normalized}, #{skipped})
    </insert>

    <insert id="markAsNormalized">
        UPDATE data_lake SET normalized = 'true' WHERE observation_id = #{observationId}
    </insert>

    <insert id="markAsSkipped">
        UPDATE data_lake SET skipped = true WHERE observation_id = #{observationId}
    </insert>

    <select id="getLatestUpdatedEventForProvider" resultType="io.kontur.eventapi.entity.DataLake">
        SELECT observation_id as observationId, external_id as externalId, updated_at as updatedAt, loaded_at as loadedAt, provider, data
        FROM data_lake
        WHERE provider = #{provider}
        ORDER BY updated_at DESC
        LIMIT 1
    </select>

    <select id="getPdcHpSrvHazardsWithoutAreas" resultMap="dataLakeMap">
        SELECT distinct on (e1.external_id) *
        FROM data_lake e1
        WHERE e1.provider = 'hpSrvSearch'
          AND NOT EXISTS(
                select * from data_lake e2 where e1.external_id = e2.external_id and e2.provider = 'hpSrvMag'
              )
    </select>

    <select id="getDenormalizedEvents" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake e
        WHERE normalized is false and skipped is false
        <foreach item="provider" collection="providers" separator="," open="and provider in (" close=")">
            #{provider}
        </foreach>
        ORDER BY loaded_at
        LIMIT 100000
    </select>

    <select id="getDataLakesByExternalId" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE external_id = #{externalId}
    </select>

    <select id="getDataLakesByExternalIds" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE
        <foreach item="externalId" collection="externalIds" separator="," open="external_id in (" close=")">
            #{externalId}
        </foreach>
    </select>

    <select id="getDataLakesByExternalIdsAndProvider" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE
        provider = #{provider} AND
        <foreach item="externalId" collection="externalIds" separator="," open="external_id in (" close=")">
            #{externalId}
        </foreach>
    </select>

    <select id="getDataLakesIdByExternalIdsAndProvider" resultType="java.lang.String">
        SELECT external_id
        FROM data_lake
        WHERE
        provider = #{provider} AND
        <foreach item="externalId" collection="externalIds" separator="," open="external_id in (" close=")">
            #{externalId}
        </foreach>
    </select>

    <select id="getLatestDataLakeByExternalIdAndProvider" resultMap="dataLakeMap">
        SELECT *
        FROM data_lake
        WHERE external_id = #{externalId}
          AND provider = #{provider}
        ORDER BY updated_at DESC
        LIMIT 1
    </select>

    <select id="getPdcExposureGeohashes" resultMap="exposureGeohash">
        SELECT external_id, (data::json -> 'properties' ->> 'geohash') as geohash
        FROM data_lake
        WHERE provider = 'pdcMapSrv' AND
        <foreach item="externalId" collection="externalIds" separator="," open="external_id in (" close=")">
            #{externalId}
        </foreach>
    </select>

    <select id="isNewPdcExposure" resultType="java.lang.Boolean">
        WITH datalakes AS (
            SELECT * FROM data_lake
            WHERE external_id = #{externalId} AND provider = 'pdcMapSrv'
        )
        SELECT
            CASE WHEN EXISTS (
                SELECT * FROM datalakes
                WHERE (data::json -> 'properties' ->> 'geohash') = #{geoHash}
            ) THEN FALSE ELSE TRUE
            END
    </select>

    <select id="isNewEvent" resultType="java.lang.Boolean">
        SELECT
            CASE WHEN EXISTS (
                    SELECT a.*
                    FROM (SELECT * FROM data_lake
                          WHERE external_id =  #{externalId}
                            AND provider = #{provider}
                            AND updated_at at time zone 'UTC' = to_timestamp(#{updatedAt}, 'YYYY-MM-DDThh24:mi:ss')::timestamp
                         ) a
                ) THEN FALSE ELSE TRUE
                END
    </select>

    <select id="getNotNormalizedObservationsCount" resultType="java.lang.Integer">
        select count(*) from data_lake where not normalized and not skipped;
    </select>

    <resultMap id="dataLakeMap" type="io.kontur.eventapi.entity.DataLake">
        <result property="observationId" column="observation_id" />
        <result property="externalId" column="external_id" />
        <result property="updatedAt" column="updated_at" />
        <result property="loadedAt" column="loaded_at" />
        <result property="provider" column="provider" />
        <result property="data" column="data" />
        <result property="normalized" column="normalized" />
        <result property="skipped" column="skipped" />
    </resultMap>

    <resultMap id="exposureGeohash" type="io.kontur.eventapi.entity.ExposureGeohash">
        <result property="externalId" column="external_id" />
        <result property="geohash" column="geohash"/>
    </resultMap>

</mapper>