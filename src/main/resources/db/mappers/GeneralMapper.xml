<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.GeneralMapper">

    <select id="getObservationNormalizationDuration" resultMap="processingDuration">
        with durations as (
            select extract(epoch from (no.normalized_at - dl.loaded_at)::interval) as duration, normalized_at
            from data_lake dl
                inner join normalized_observations no on dl.observation_id = no.observation_id
            where no.normalized_at > #{latestNormalizedAt}
        )
        select
            avg(duration) as avg,
            max(duration) as max,
            min(duration) as min,
            count(*) as count,
            max(normalized_at) as latest_processed_at
        from durations
    </select>

    <select id="getObservationsRecombinationDuration" resultMap="processingDuration">
        with durations as (
            select extract(epoch from (ke.recombined_at - no.normalized_at)::interval) as duration, recombined_at
            from normalized_observations no
                inner join kontur_events ke on no.observation_id = ke.observation_id
            where ke.recombined_at > #{latestRecombinedAt}
        )
        select
            avg(duration) as avg,
            max(duration) as max,
            min(duration) as min,
            count(*) as count,
            max(recombined_at) as latest_processed_at
        from durations
    </select>

    <select id="getEventCompositionDuration" resultMap="processingDuration">
        with durations as (
            select extract(epoch from (fd.composed_at - fes.recombined_at)::interval) as duration, composed_at
            from feed_event_status fes
                inner join feed_data fd on fes.event_id = fd.event_id and fes.feed_id = fd.feed_id
            where fd.composed_at > #{latestComposedAt} and fd.version = 1
        )
        select
            avg(duration) as avg,
            max(duration) as max,
            min(duration) as min,
            count(*) as count,
            max(composed_at) as latest_processed_at
        from durations
    </select>

    <select id="getEventEnrichmentDuration" resultMap="processingDuration">
        with durations as (
            select extract(epoch from (fd.enriched_at - fd.composed_at)::interval) as duration, enriched_at
            from feed_data fd
            where fd.enriched_at is not null and fd.enriched_at > #{latestEnrichedAt}
        )
        select
            avg(duration) as avg,
            max(duration) as max,
            min(duration) as min,
            count(*) as count,
            max(enriched_at) as latest_processed_at
        from durations
    </select>

    <resultMap id="processingDuration" type="io.kontur.eventapi.entity.ProcessingDuration">
        <result property="avg" column="avg"/>
        <result property="max" column="max"/>
        <result property="min" column="min"/>
        <result property="count" column="count"/>
        <result property="latestProcessedAt" column="latest_processed_at"/>
    </resultMap>
</mapper>