<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.FeedMapper">

    <select id="getFeeds" resultMap="feedDtoMap">
        select *
        from feeds
    </select>

    <select id="getFeedsByAliases" resultMap="feedDtoMap">
        select *
        from feeds
        where (#{aliases, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler})::text[] @> ('{}'::text[] || alias)
    </select>

    <insert id="insertFeedData" useGeneratedKeys="false">
        insert into feed_data (event_id, feed_id, version, name, proper_name, description, type, severity_id,
                               active, started_at, ended_at, updated_at, location, urls,
                               external_event_ids, providers, merge_done,
                               <if test='loss != null'>loss,</if>
                               <if test='severityData != null'>severity_data,</if>
                               observations, geometries, episodes, enriched, auto_expire)
        values (#{eventId}, #{feedId}, #{version}, #{name}, #{properName}, #{description}, #{type},
                (select severity_id from severities where severity = #{severity}),
                #{active}, #{startedAt}, #{endedAt}, #{updatedAt}, #{location},
                #{urls, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler},
                #{externalEventIds, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler},
                #{providers, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler},
                #{mergeDone},
                <if test='loss != null'>#{loss,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
                <if test='severityData != null'>#{severityData,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
                #{observations, typeHandler=io.kontur.eventapi.typehandler.UUIDArrayTypeHandler},
                <choose>
                    <when test="geomFuncType != null &amp;&amp; geomFuncType == 1">
                        collectcyclonegeometries(#{episodes}::jsonb),
                    </when>
                    <otherwise>
                        collectEventGeometries(#{episodes}::jsonb),
                    </otherwise>
                </choose>
                #{episodes}::jsonb, #{enriched}, #{autoExpire})
    </insert>

    <update id="markOutdatedEventsVersions">
        <![CDATA[
            update feed_data set is_latest_version = false
            where event_id = #{eventId}
                and feed_id = #{feedId}
                and version < #{version}
                and is_latest_version is true
        ]]>
    </update>

    <select id="getLastFeedDataVersion" resultType="java.lang.Long">
        select max(version)
        from feed_data
        where event_id = #{eventId}
            and feed_id = #{feedId}
    </select>

    <select id="getNotEnrichedEventsForFeed" resultMap="feedDataDtoMap">
        select event_id, feed_id, version, updated_at, name,
               enriched, enrichment_attempts, event_details, geometries, episodes, enrichment_skipped
        from feed_data
        where feed_id = #{feedId} and not enriched
        order by enrichment_attempts nulls first, updated_at
        limit 1000
    </select>

    <select id="getEnrichmentSkippedEventsForFeed" resultMap="feedDataDtoMap">
        select event_id, feed_id, version, updated_at, name,
               enriched, enrichment_attempts, event_details, geometries, episodes, enrichment_skipped
        from feed_data
        where feed_id = #{feedId}
              and enrichment_skipped
              and enrichment_attempts &lt; 5
              and enriched_at &lt; now() - '48 hour'::interval
        order by enrichment_attempts, updated_at
        limit 100
    </select>

    <select id="getNotEnrichedEventsCount" resultType="java.lang.Integer">
        select count(*) from feed_data where not enriched;
    </select>

    <select id="getEnrichmentSkippedEventsCount" resultType="java.lang.Integer">
        select count(*) from feed_data where enrichment_skipped;
    </select>

    <update id="addAnalytics">
        update feed_data
        set
            <if test='eventDetails != null'>
                event_details = #{eventDetails,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,
            </if>
            enriched_at = current_timestamp,
            enriched = #{enriched},
            episodes = #{episodes}::jsonb,
            name = #{name},
            enrichment_attempts = #{enrichmentAttempts},
            enrichment_skipped = #{enrichmentSkipped}
        where feed_id = #{feedId} and event_id = #{eventId} and version = #{version}
    </update>

    <insert id="createFeed">
        insert into feeds (feed_id, alias, name, providers)
        values (#{feedId}, #{alias}, #{name}, #{providers, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler})
    </insert>

    <update id="autoExpireEvents">
        update feed_data
        set active = false
        where active and auto_expire and ended_at + interval '24 hour' &lt; now()
    </update>

    <select id="getFeedDataByFeedIdAndEventId" resultMap="feedDataDtoMap">
        select fd.*, sv.severity
        from feed_data fd
        left join severities sv on fd.severity_id = sv.severity_id
        where feed_id = #{feedId} and event_id = #{eventId} and is_latest_version
    </select>

    <resultMap id="feedDtoMap" type="io.kontur.eventapi.entity.Feed">
        <result property="feedId" column="feed_id" />
        <result property="alias" column="alias"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="roles" column="roles" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichment" column="enrichment" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichmentRequest" column="enrichment_request"/>
        <result property="enrichmentPostProcessors" column="enrichment_postprocessors" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
    </resultMap>

    <resultMap id="feedDataDtoMap" type="io.kontur.eventapi.entity.FeedData">
        <result property="eventId" column="event_id" />
        <result property="feedId" column="feed_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="properName" column="proper_name"/>
        <result property="description" column="description" />
        <result property="type" column="type" />
        <result property="severity" column="severity" />
        <result property="active" column="active"/>
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="location" column="location"/>
        <result property="urls" column="urls" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler" />
        <result property="externalEventIds" column="external_event_ids" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="mergeDone" column="merge_done"/>
        <result property="loss" column="loss" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler" />
        <result property="severityData" column="severity_data" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler" />
        <result property="eventDetails" column="event_details" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.FeedEpisodeTypeHandler"/>
        <result property="enriched" column="enriched"/>
        <result property="enrichmentAttempts" column="enrichment_attempts" />
        <result property="enrichmentSkipped" column="enrichment_skipped" />
        <result property="composedAt" column="composed_at"/>
        <result property="enrichedAt" column="enriched_at"/>
        <result property="autoExpire" column="auto_expire"/>
    </resultMap>
</mapper>