<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.FeedMapper">

    <select id="getFeeds" resultMap="feedDtoMap">
        select *
        from feeds
    </select>

    <select id="getFeedsByAliases" resultMap="feedDtoMap">
        select *
        from feeds
        where (#{aliases, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler})::text[] @> ('{}'::text[] || alias)
    </select>

    <insert id="insertFeedData" useGeneratedKeys="false">
        insert into feed_data (event_id, feed_id, version, name, proper_name, description, started_at, ended_at,
                               updated_at, observations, episodes, is_latest_version, enriched, geometries,
                               enrichment_attempts, urls, location)
        values (#{eventId}, #{feedId}, #{version}, #{name}, #{properName}, #{description}, #{startedAt}, #{endedAt},
                #{updatedAt}, #{observations, typeHandler=io.kontur.eventapi.typehandler.UUIDArrayTypeHandler},
                #{episodes}::jsonb, true, #{enriched}, collectEventGeometries(#{episodes}::jsonb), 0,
                #{urls, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler}, #{location})
    </insert>

    <update id="markOutdatedEventsVersions">
    <![CDATA[
        update feed_data set is_latest_version = false
        where event_id = #{eventId}
          and feed_id = #{feedId}
          and version < #{version}
          and is_latest_version is true
    ]]>
    </update>

    <select id="searchForEvents" resultMap="feedDataDtoMap">
        select event_id, feed_id, version, name, proper_name, description, started_at, ended_at, updated_at, observations,
               collected_geometry, episode_types, is_latest_version, geometries, event_details, enriched, urls, location,
               composed_at, enriched_at,
        <choose>
            <when test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                jsonb_build_array((
                    select episode from jsonb_array_elements(episodes) episode
                    order by (episode ->> 'updatedAt')::timestamptz desc
                    limit 1
                )) as episodes
            </when>
            <otherwise>
                episodes
            </otherwise>
        </choose>
        from feed_data fd
        where fd.feed_id = ( select feed_id from feeds where alias = #{feedAlias} )
            and is_latest_version
            and enriched
            <if test="eventTypes!=null &amp;&amp; !eventTypes.isEmpty" >
                <foreach item="eventType" collection="eventTypes" separator="," open="and episode_types &amp;&amp; array[" close="]">
                    #{eventType}::text
                </foreach>
            </if>
            <if test="severities!=null &amp;&amp; !severities.isEmpty"  >
                <if test='"ANY".equalsIgnoreCase(episodeFilterType)'>
                    and exists(select from jsonb_array_elements(episodes) arr(episode) where
                    <foreach item="severity" collection="severities" separator="," open="episode ->> 'severity' in (" close=")">
                        #{severity}
                    </foreach>
                    )
                </if>
                <if test='"LATEST".equalsIgnoreCase(episodeFilterType)'>
                    and exists (
                        with latest_episode as (
                            select episode as ep from jsonb_array_elements(episodes) episode
                            order by (episode ->> 'updatedAt')::timestamptz desc
                            limit 1
                        )
                        select * from latest_episode where
                        <foreach item="severity" collection="severities" separator="," open="ep ->> 'severity' in (" close=")">
                            #{severity}
                        </foreach>
                    )
                </if>
            </if>
            <if test='from != null'>
                <![CDATA[
                and (fd.ended_at >= #{from})
                ]]>
            </if>
            <if test='to != null'>
                <![CDATA[
                and (fd.started_at <= #{to})
                ]]>
            </if>
            <if test='updatedAfter != null'>
                <if test='"ASC".equalsIgnoreCase(sortOrder)'>
                    and fd.updated_at > #{updatedAfter}
                </if>
                <if test='"DESC".equalsIgnoreCase(sortOrder)'>
                    and fd.updated_at &lt; #{updatedAfter}
                </if>
            </if>
            <if test="xMin!=null &amp;&amp; yMin!=null &amp;&amp; xMax!=null &amp;&amp; yMax!=null">
                and ST_Intersects(ST_MakeEnvelope(#{xMin}, #{yMin}, #{xMax}, #{yMax}, 4326), fd.collected_geometry)
            </if>
        order by fd.updated_at ${sortOrder}
        limit #{limit};
    </select>

    <select id="getEventByEventIdAndByVersionOrLast" resultMap="feedDataDtoMap">
        WITH feed as (SELECT feed_id
                      FROM feeds
                      WHERE alias = #{feedAlias})
        SELECT fd.*
        FROM feed_data fd,
             feed f
        WHERE fd.event_id = #{eventId}
          AND f.feed_id = fd.feed_id
        <choose>
            <when test="version != null">
                AND fd.version = #{version}
            </when>
            <otherwise>
                ORDER BY version DESC
                LIMIT 1
            </otherwise>
        </choose>

    </select>

    <select id="getLastFeedDataVersion" resultType="java.lang.Long">
        SELECT max(version)
        FROM feed_data
        WHERE event_id = #{eventId}
            AND feed_id = #{feedId}
    </select>

    <select id="getNotEnrichedEventsForFeed" resultMap="feedDataDtoMap">
        SELECT * FROM feed_data fd
        WHERE feed_id = #{feedId} AND NOT enriched
        ORDER BY enrichment_attempts ASC NULLS FIRST, updated_at ASC
        LIMIT 1000
    </select>

    <select id="getEnrichmentSkippedEventsForFeed" resultMap="feedDataDtoMap">
        SELECT * FROM feed_data fd
        WHERE feed_id = #{feedId} AND enrichment_skipped
              AND (enrichment_attempts &lt; 5 or enriched_at &lt; now() - '24 hour'::interval)
        ORDER BY enrichment_attempts, updated_at
        LIMIT 10
    </select>

    <select id="getNotEnrichedEventsCount" resultType="java.lang.Integer">
        SELECT count(*) FROM feed_data WHERE NOT enriched;
    </select>

    <select id="getEnrichmentSkippedEventsCount" resultType="java.lang.Integer">
        SELECT count(*) FROM feed_data WHERE enrichment_skipped;
    </select>

    <update id="addAnalytics">
        UPDATE feed_data
        SET
            <if test='eventDetails != null'>
                event_details = #{eventDetails}::jsonb,
            </if>
            enriched_at = current_timestamp,
            enriched = #{enriched},
            episodes = #{episodes}::jsonb,
            name = #{name},
            enrichment_attempts = #{enrichmentAttempts},
            enrichment_skipped = #{enrichmentSkipped}
        WHERE feed_id = #{feedId} AND event_id = #{eventId} AND version = #{version}
    </update>

    <resultMap id="feedDtoMap" type="io.kontur.eventapi.entity.Feed">
        <result property="feedId" column="feed_id" />
        <result property="description" column="description"/>
        <result property="alias" column="alias"/>
        <result property="providers" column="providers" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="roles" column="roles" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichment" column="enrichment" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="enrichmentRequest" column="enrichment_request"/>
        <result property="enrichmentPostProcessors" column="enrichment_postprocessors" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
    </resultMap>

    <resultMap id="feedDataDtoMap" type="io.kontur.eventapi.entity.FeedData">
        <result property="eventId" column="event_id" />
        <result property="feedId" column="feed_id" />
        <result property="version" column="version" />
        <result property="name" column="name" />
        <result property="properName" column="proper_name"/>
        <result property="description" column="description" />
        <result property="startedAt" column="started_at" />
        <result property="endedAt" column="ended_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="observations" column="observations" typeHandler="io.kontur.eventapi.typehandler.UUIDArrayTypeHandler" />
        <result property="episodes" column="episodes" typeHandler="io.kontur.eventapi.typehandler.FeedEpisodeTypeHandler"/>
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="eventDetails" column="event_details" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="enriched" column="enriched"/>
        <result property="enrichmentAttempts" column="enrichment_attempts" />
        <result property="enrichmentSkipped" column="enrichment_skipped" />
        <result property="urls" column="urls" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler" />
        <result property="location" column="location"/>
        <result property="composedAt" column="composed_at"/>
        <result property="enrichedAt" column="enriched_at"/>
    </resultMap>
</mapper>