<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.eventapi.dao.mapper.NormalizedObservationsMapper">
    <insert id="insert">
        insert into normalized_observations (
            observation_id, external_event_id, external_episode_id, provider, origin, name, proper_name,
            description, episode_description, type, event_severity, active, loaded_at, started_at,
            ended_at, source_updated_at, region, urls, cost,
            <if test='loss != null'>loss,</if>
            <if test='severityData != null'>severity_data,</if>
            <if test='geometries != null'>geometries,</if>
            auto_expire, recombined
        ) values (
            #{observationId}, #{externalEventId}, #{externalEpisodeId}, #{provider}, #{origin}, #{name}, #{properName},
            #{description}, #{episodeDescription}, #{type}, #{eventSeverity}, #{active}, #{loadedAt}, #{startedAt},
            #{endedAt}, #{sourceUpdatedAt}, #{region}, #{urls, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler},
            #{cost},
            <if test='loss != null'>#{loss,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
            <if test='severityData != null'>#{severityData,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
            <if test='geometries != null'>#{geometries}::jsonb,</if>
            #{autoExpire}, #{recombined}
        )
        on conflict (observation_id) do update
        set external_event_id = #{externalEventId}, external_episode_id = #{externalEpisodeId}, provider = #{provider},
            origin = #{origin}, name = #{name}, proper_name = #{properName}, description = #{description},
            episode_description = #{episodeDescription}, type = #{type}, event_severity = #{eventSeverity},
            active = #{active}, loaded_at = #{loadedAt}, started_at = #{startedAt}, ended_at = #{endedAt},
            source_updated_at = #{sourceUpdatedAt}, region = #{region},
            urls = #{urls, typeHandler=io.kontur.eventapi.typehandler.StringArrayTypeHandler}, cost = #{cost},
            <if test='loss != null'>loss = #{loss,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
            <if test='severityData != null'>severity_data = #{severityData,typeHandler=io.kontur.eventapi.typehandler.MapTypeHandler}::jsonb,</if>
            <if test='geometries != null'>geometries = #{geometries}::jsonb,</if>
            auto_expire = #{autoExpire}, recombined = #{recombined}
    </insert>

    <insert id="markAsRecombined">
        update normalized_observations set recombined = 'true' where observation_id = #{observationId}
    </insert>

    <select id="getObservationsNotLinkedToEvent" resultMap="normalizedObservationsDtoMap">
        select *
        from normalized_observations
        where recombined is false
        <foreach item="provider" collection="providers" separator="," open="and provider in (" close=")">
            #{provider}
        </foreach>
        order by loaded_at
        limit 100000
    </select>

    <select id="getFirmsObservationsNotLinkedToEventFor24Hours" resultMap="normalizedObservationsDtoMap">
        with obs as (
            select min(source_updated_at) as min_sua
            from normalized_observations
            where recombined is false
                and provider in ('firms.modis-c6', 'firms.suomi-npp-viirs-c2', 'firms.noaa-20-viirs-c2')
        )
        select * from normalized_observations
        where recombined is false
            and provider in ('firms.modis-c6', 'firms.suomi-npp-viirs-c2', 'firms.noaa-20-viirs-c2')
            and source_updated_at between (select min_sua from obs) - interval '1s' and (select min_sua from obs) + interval '24 hours'
        order by source_updated_at
        limit 30000
    </select>

    <select id="clusterObservationsByGeography" resultType="java.util.Set">
        select array_agg(observation_id)::uuid[] from (
            select
                ST_ClusterDBSCAN(ST_Transform(collected_geography::geometry, 54032), 2000, 1) over() as cid,
                observation_id
            from normalized_observations
            <foreach item="observationId" collection="observationIds" separator="," open="where observation_id in (" close=")">
                  #{observationId}
            </foreach>
        ) as clusters
        group by cid
    </select>

    <select id="getObservationsByEventId" resultMap="normalizedObservationsDtoMap">
        select *
        from normalized_observations
        where observation_id in (select observation_id from kontur_events where event_id = #{eventId});
    </select>

    <select id="getObservations" resultMap="normalizedObservationsDtoMap">
        select *
        from normalized_observations
        <foreach item="obsId" collection="observationIds" separator="," open="where observation_id in (" close=")">
            #{obsId}
        </foreach>
    </select>

    <select id="getDuplicateObservation" resultMap="normalizedObservationsDtoMap">
        select *
        from normalized_observations
        where external_episode_id = #{externalEpisodeId}
          and loaded_at &lt;= #{loadedAt}
          and observation_id != #{observationId}
          and provider = #{provider}
        order by loaded_at desc
        limit 1
    </select>

    <select id="getTimestampAtTimezone" resultType="java.time.OffsetDateTime">
        select #{timestamp}::timestamp at time zone #{timezone};
    </select>

    <select id="getNotRecombinedObservationsCount" resultType="java.lang.Integer">
        select count(*) from normalized_observations where not recombined;
    </select>

    <resultMap id="normalizedObservationsDtoMap" type="io.kontur.eventapi.entity.NormalizedObservation">
        <result property="observationId" column="observation_id"/>
        <result property="externalEventId" column="external_event_id"/>
        <result property="externalEpisodeId" column="external_episode_id"/>
        <result property="provider" column="provider"/>
        <result property="origin" column="origin"/>
        <result property="name" column="name"/>
        <result property="properName" column="proper_name"/>
        <result property="description" column="description"/>
        <result property="episodeDescription" column="episode_description"/>
        <result property="type" column="type"/>
        <result property="eventSeverity" column="event_severity"/>
        <result property="active" column="active"/>
        <result property="loadedAt" column="loaded_at"/>
        <result property="startedAt" column="started_at"/>
        <result property="endedAt" column="ended_at"/>
        <result property="sourceUpdatedAt" column="source_updated_at"/>
        <result property="region" column="region"/>
        <result property="urls" column="urls" typeHandler="io.kontur.eventapi.typehandler.StringArrayTypeHandler"/>
        <result property="cost" column="cost"/>
        <result property="loss" column="loss" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="severityData" column="severity_data" typeHandler="io.kontur.eventapi.typehandler.MapTypeHandler"/>
        <result property="geometries" column="geometries" typeHandler="io.kontur.eventapi.typehandler.FeatureCollectionTypeHandler"/>
        <result property="autoExpire" column="auto_expire"/>
        <result property="recombined" column="recombined"/>
        <result property="normalizedAt" column="normalized_at"/>
    </resultMap>
</mapper>